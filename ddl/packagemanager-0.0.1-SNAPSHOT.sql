
    create table public.review (
        id bigint generated by default as identity,
        datecreated timestamp,
        lastupdated timestamp,
        token varchar(5) not null,
        details varchar(5000) not null,
        title varchar(35) not null,
        rating integer not null,
        cancelled boolean not null,
        indexes integer not null,
        r_user_id bigint not null,
        rating_user_id bigint not null,
        primary key (id),
        constraint FK5PVU4WR9TFJ9B915TDEPMJAQ1
            foreign key (r_user_id) references USER (id),
        constraint FKOGVI3LF5JH16WQIAXRRPJSXMQ
            foreign key (rating_user_id) references USER (id)
    );

    create table public.airline (
       code varchar(255) not null,
        token varchar(255) not null,
        date_created timestamp,
        last_updated timestamp,
        cancelled boolean not null default false ,
        description varchar(255),
        primary key (code, token)
    );

    create table public.announce (
       id bigint generated by default as identity,
        datecreated timestamp,
        lastupdated timestamp,
        token varchar(255) not null,
        description varchar(255),
        announce_type varchar(10),
        arrival varchar(255) not null,
        cancelled boolean not null,
        departure varchar(255) not null,
        end_date date not null,
        prenium_price decimal(19,2),
        gold_price decimal(19,2) ,
        price decimal(19,2) not null,
        start_date date not null,
        status varchar(10),
        weight decimal(19,2) not null,
        transport varchar(5),
        r_user_id bigint not null,
        primary key (id)
    );

    create table public.message (
       id bigint not null,
        token varchar(255) not null,
        date_created timestamp,
        last_updated timestamp,
        cancelled boolean not null,
        content varchar(255),
        r_announce bigint,
        r_user_id bigint not null,
        primary key (id, token)
    );

    create table public.prod_category (
       code varchar(255) not null,
        token varchar(255) not null,
        date_created timestamp,
        last_updated timestamp,
        cancelled boolean not null,
        description varchar(255),
        primary key (code, token)
    );

    create table public.role (
       id integer generated by default as identity,
        description varchar(255) not null,
        primary key (id)
    );

    create table public.user (
       id bigint generated by default as identity,
        date_created timestamp,
        last_updated timestamp,
        active integer not null,
        cancelled boolean not null,
        email varchar(255) not null,
        facebook_id varchar(255),
        first_name varchar(255) not null,
        gender varchar(10),
        google_id varchar(255),
        last_name varchar(255) not null,
        password varchar(255) not null,
        phone varchar(35),
        username varchar(15) not null,
        confirm_token VARCHAR(255),
        primary key (id)
    );

    alter table public.user 
       add constraint UK_t8tbwelrnviudxdaggwr1kd9b unique (username);

    alter table public.user 
       add constraint UK_ob8kqyqqgmefl0aco34akdtpe unique (email);

    create table user_role (
       r_user bigint not null,
        role_id integer not null,
        primary key (r_user, role_id)
    );


    alter table public.announce 
       add constraint FK2tf4smsf24oghjw4kl45h6905 
       foreign key (r_user_id)
       references public.user (id);

    alter table public.message 
       add constraint FKeph3inc9ec6ltm0g3y66jdsv4 
       foreign key (r_announce) 
       references public.announce;

    alter table public.message 
       add constraint FKbbdd6eus5aew0pc10wsu2ei6y 
       foreign key (r_user_id)
       references public.user (username);

    alter table user_role 
       add constraint FKa68196081fvovjhkek5m97n3y 
       foreign key (role_id) 
       references public.role;

    alter table user_role 
       add constraint FKatonpihtfwg1o8um03xwqwj25 
       foreign key (r_user) 
       references public.user;
